---
import type { GetStaticPaths } from "astro";
import BlogPost from "../../components/BlogPost.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import type { FrontMatter } from "../../layouts/MarkdownPostLayout.astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const allPosts = await Astro.glob("../posts/*.md");

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  // dynamic paths
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });

  // staticly paths
  // return [
  //   { params: { tag: "astro" }, props: { posts: allPosts } },
  //   { params: { tag: "successes" }, props: { posts: allPosts } },
  //   { params: { tag: "community" }, props: { posts: allPosts } },
  //   { params: { tag: "blogging" }, props: { posts: allPosts } },
  //   { params: { tag: "setbacks" }, props: { posts: allPosts } },
  //   { params: { tag: "learning in public" }, props: { posts: allPosts } },
  // ];
};

interface Props {
  posts: {
    url: string;
    frontmatter: FrontMatter;
  }[];
}
const { posts } = Astro.props;
const { tag } = Astro.params;

// NOTE: for dynamic it is not needed since it is filtered inside getStaticPaths
// const filteredPosts = posts.filter(
//   (post: { frontmatter: { tags: (string | undefined)[] } }) =>
//     post.frontmatter.tags.includes(tag)
// );
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>

  <ul>
    {
      posts.map((post) => (
        <BlogPost title={post.frontmatter.title} url={post.url} />
        // <li>
        //   <a href={post.url}>{post.frontmatter.title}</a>
        // </li>
      ))
    }
  </ul>
</BaseLayout>
